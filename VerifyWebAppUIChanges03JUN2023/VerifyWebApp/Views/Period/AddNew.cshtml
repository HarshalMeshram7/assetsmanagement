@model VerifyWebApp.Models.Period
@{
    /**/

    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Add";
}



@using (@Html.BeginForm(null, null, FormMethod.Post, new { id = "frmNewEmp", name = "frmNewEmp" }))
{
    @Html.AntiForgeryToken()
    <div id="page-wrapper" class="container-fluid rounded page border shadow">
        <div class="card">
            <div class="card-header pb-0">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="row justify-content-md-center title hborder">
                            <div class="htitle"> <b>Add New Period</b></div>
                        </div>
                    </div>
                    <!-- /.col-lg-12 -->
                </div>
                <div class="pageconent">
                    <div class="card-body">
                        <div class="row">
                            @*<div class="col-lg-3">
                            <div class="form-group">
                                <label for="praticesname">Start Date<span>*</span></label>

                                <input id="txtStartDate" tabindex="6" class="form-control form-control-sm" placeholder="dd-mm-yyyy" value="" type="date" />

                            </div>
                            <div style="color:#CC0000;font-weight:400" id="startdateerror">Select Date</div>
                        </div>*@
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label for="praticesname">Start Date<span>*</span></label>
                                <input id="txtStartDate" tabindex="6" class="form-control form-control-sm" type="date" />

                            </div>
                            <div style="color:#CC0000;font-weight:400" id="startdateerror">Select Date</div>
                            <div></div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label for="praticesname">End Date<span>*</span></label>
                                <input id="txtEndDate" tabindex="6" class="form-control form-control-sm" placeholder="dd-mm-yyyy" value="" type="date" />

                            </div>
                            <div style="color:#CC0000;font-weight:400" id="enddateerror">Select Date</div>
                            <div></div>
                        </div>

                        @*<div style="color:#CC0000;font-weight:400" id="invalideparentdateerror">Select Date</div>*@
                    </div>

                </div>


            </div>

            <div class="row" style="padding-left:30px">
                <div class="col-md-12">
                    Sub-Period List
                </div>
            </div>

            <div class="row my-1" style="padding-left:30px">
                <div class="col-md-12">
                    <div class="pull-right">
                        <button type="button" class="btn btn-sm nBtn" id="btnAddSubPeiod"
                                data-toggle="modal">
                            Add Sub-Period
                        </button>
                    </div>
                </div>
            </div>

            <div class="row" style="padding-left:30px">
                <div class="col-lg-12">
                    <div class="table-responsive">
                        <table width="100%" class="table table-hover text-uppercase text-xs" id="tblSubPeriod">
                            <thead class="hcol" style="font-weight:bold">
                                <tr>

                                    <td>
                                        SrNo
                                    </td>
                                    <td>
                                        Start Date
                                    </td>
                                    <td>
                                        End Date
                                    </td>
                                    <td>
                                        Period Lock
                                    </td>
                                    <td>
                                        Depreciation calculated or not
                                    </td>

                                    <td align="center">
                                        Edit
                                    </td>
                                    <td align="center">
                                        Delete
                                    </td>
                                </tr>
                            </thead>
                            <tbody style="font-weight:bold;color:black"></tbody>
                        </table>

                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="submit"
                        class="btn btn-sm saveBtn" id="btnSave">
                    Save
                </button>
            </div>
        </div>
    </div>




}
<div id="subperiodmodal" class="modal fade" role="dialog" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">

                <h4 class="modal-title">Add SubPeriod</h4>
            </div>
            <div class="modal-body ">

                <div class="form-group col-lg-6">
                    <label for="praticesname">Start Date<span>*</span></label>

                    <div class='input-group date' id='dtspStartDate'>
                        <input type='date' id="txtspStartDate" class="form-control" required />

                    </div>

                </div>


                <div class="form-group col-lg-6">

                    <label for="praticesname">End Date<span>*</span></label>

                    @*@Html.TextBoxFor(m => m.LeaveDate, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.LeaveDate, "", new { @class = "text-danger  " })*@
                    <div class='input-group date' id='dtspEndDate'>
                        <input type='date' id="txtspEndDate" class="form-control" required />


                    </div>

                </div>


                <div class="form-group col-lg-6">
                    <label>Lock this period so entries cannot be made</label>
                    @Html.CheckBox("isPeriodlockFlag", false)

                </div>
                <div style="color:#CC0000;font-weight:400" id="spinvaliddateerror"></div>
            </div>

            <div><label style="font-size:12px;color:red "><span>*</span> Mandatory Fields</label></div>

            <div class="modal-footer">
                <button type="button" class="btn btn-sm clBtn" onclick="addsubperiod();">Save</button>
                <button type="button" class="btn btn-sm saveBtn" onclick="closeaddperiod();">Close</button>

            </div>
        </div>
    </div>
</div>


<div id="editsubperiodmodal" class="modal fade" role="dialog" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">

                <h4 class="modal-title">Edit SubPeriod</h4>
            </div>
            <div class="modal-body ">
                <div class="form-group col-lg-6">
                    <label for="praticesname">Start Date<span>*</span></label>

                    <div class='input-group date' id='dtedspStartDate'>
                        <input type='date' id="txtedspStartDate" class="form-control" required />
                        @*<div class="input-group-addon">
                            <span class="input-group-text"><span class="fa fa-calendar"></span></span>

                        </div>*@

                    </div>

                </div>
                <div class="form-group col-lg-6">
                    <label for="praticesname">End Date<span>*</span></label>
                    @*@Html.TextBoxFor(m => m.LeaveDate, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.LeaveDate, "", new { @class = "text-danger  " })*@
                    <div class='input-group date' id='dtedspEndDate'>
                        <input type='date' id="txtedspEndDate" class="form-control" required />

                        @*<div class="input-group-addon">
                            <span class="input-group-text"><span class="fa fa-calendar"></span></span>

                        </div>*@

                    </div>

                    <div class="form-group col-lg-6">
                        <label>Lock this period so entries cannot be made</label>
                        @Html.CheckBox("edisPeriodlockFlag", false)

                    </div>
                    <div style="color:#CC0000;font-weight:400" id="edspinvaliddateerror"></div>
                </div>


                <div><label style="font-size:12px;color:red "><span>*</span> Mandatory Fields</label></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-sm saveBtn" onclick="closeeditsubperiod();">Close</button>
                <button type="button" class="btn btn-sm clBtn" onclick="editsubperiod();">Save</button>
            </div>
        </div>

    </div>

</div>



<script type="text/javascript">
        var srnocnt = 1;

        var editindex = 0;

        var EndDateStatus = false;
        var StartDateStatus = false;
    $(document).ready(function () {
        InitUI();
    });

    @*function gettoken() {
        var token = '@Html.AntiForgeryToken()';
        token = $(token).val();
        return token;
   }*@
        function InitUI() {

            $("#frmNewEmp").submit(function (e) {
                e.preventDefault();
               // alert('Yes');
                SaveData();
                return false;

            });

             let _startdate = moment('@ViewBag.fromdate', 'DD/MM/YYYY').format('YYYY-MM-DD');
            $("#txtStartDate").val(_startdate);
         //   $("#stDate").val('@ViewBag.fromdate');



              $("#btnAddSubPeiod").click(function () {
                  var startdate = $('#txtStartDate').val();
                  var enddate = $('#txtEndDate').val();
                 // debugger;
                  if (startdate != "" && enddate != "") {

                      var lastTr = $('#tblSubPeriod tr:last').find('td:eq(2)').html()
                     // alert(lastTr)
                      var spstartdate = $('#txtStartDate').val();
                    //  alert(spstartdate)
                      if (lastTr.trim() != "End Date") {/////tr thname end date null is not working
                          //    alert(lastTr);
                          if (lastTr.trim() == "End Date") {
                              $("#txtspStartDate").val('@ViewBag.fromdate');
                              document.getElementById('txtspStartDate').readOnly = true;
                              $('#txtspEndDate').val("");
                          }
                          else {
                              var myDate = moment(lastTr, "DD/MM/YYYY");
                              var date = moment(myDate).add('1', 'day').format("DD/MM/YYYY");
                              $('#txtspStartDate').val(date);
                              document.getElementById('txtspStartDate').readOnly = true;
                              $('#txtspEndDate').val("");
                          }
                      }
                      else {
                          //alert("else")
                        //  debugger;
                          $('#txtspStartDate').val(spstartdate);
                          document.getElementById('txtspStartDate').readOnly = true;
                          $('#txtspEndDate').val();
                      }



                      $('#subperiodmodal').modal('show');
                  }
                  else {
                      swal("Alert", "Please enter start date and end date", "warning");
                      return;
                  }

        });

              $("#startdateerror,#enddateerror,#spinvaliddateerror,#edspinvaliddateerror,#invalideparentdateerror").hide();


    }

    function SaveData() {
      var startdate = moment($("#txtStartDate").val()).format('YYYY-MM-DD');
        var enddate = moment($("#txtEndDate").val()).format('YYYY-MM-DD');

        if (new Date(startdate) > new Date(enddate)) {

            $("#invalideparentdateerror").html(" * To Date must be greater than From Date");
            $("#invalideparentdateerror").show();
        }
        else {

            $("#invalideparentdateerror").hide();

            var StartDate;
            var EndDate;



            StartDate = $('#txtStartDate').val();
            EndDate = $('#txtEndDate').val();




            if (StartDate == '') {
                StartDateStatus = false;
            }
            else {
                //$('#assignError').hide();
                StartDateStatus = true;
            }
            if (EndDate == '') {
                EndDateStatus = false;
            }
            else {
                //$('#assignError').hide();
                EndDateStatus = true;
            }

            if (StartDateStatus == true && EndDateStatus == true) {

                $("#startdateerror,#enddateerror").hide();

                var tbl = $('#tblSubPeriod tbody tr:has(td)').map(function (i, v) {
                    var $td = $('td', this);
                    var Tablestartdate = $td.eq(1).html();
                    var Tableenddate = $td.eq(2).html();
                    var Tableperiodlock = $td.eq(3).html();
                    var Tabledepriciation = $td.eq(4).html();

                    var Strstartdate = moment(Tablestartdate, "DD/MM/YYYY").format("YYYY/MM/DD");
                    var StrEnddate = moment(Tableenddate, "DD/MM/YYYY").format("YYYY/MM/DD");

                    return {
                        FromDate: Strstartdate,
                        ToDate: StrEnddate,
                        PeriodLockFlag: Tableperiodlock,
                        DepFlag: Tabledepriciation
                    }
                }).get();


                //var Strstartdate = moment(StartDate, "DD/MM/YYYY").format("YYYY/MM/DD");
                //var StrEnddate = moment(EndDate, "DD/MM/YYYY").format("YYYY/MM/DD");

                var Strstartdate = moment($("#txtStartDate").val()).format('YYYY-MM-DD');
                var StrEnddate = moment($("#txtEndDate").val()).format('YYYY-MM-DD');

                var postdata =
                    {
                        "FromDate": Strstartdate,
                        "ToDate": StrEnddate,

                        "PeriodViewModellist": tbl
                    };

                var form = $('#frmNewEmp');
                var token = $('input[name="__RequestVerificationToken"]', form).val();
                var headers = {};
                headers['__RequestVerificationToken'] = token;

                swal({ title: "Are You Sure?", text: "You won't be able to revert this!", icon: "warning", buttons: true, dangerMode: true }).then((result) => {
                    if (result == true) {

                        var ControllerURL = '@Url.Action("AddNew", "Period")';

                        // alert(ControllerURL);
                        var returnURL = '@Url.Action("Index", "Period")';
                        $.ajax({
                            type: 'POST',
                            url: ControllerURL,
                            contentType: "application/json",
                            headers: headers,
                            data:JSON.stringify(postdata)
                            ,

                            success: function (res) {
                              //  debugger;
                                if (res == "Success") {
                                    swal({ title: "Successfully Added!", icon: "success" }).then((result) => {
                                        if (result == true) {
                                            window.location.replace(returnURL);
                                        }
                                    });
                                }
                                else {
                                    swal("Alert", "You Cannot Add this Record", "warning");
                                }
                            },


                            failure: function () { alert("Error"); }

                        });
                    }
                });
                // window.location.replace(returnURL);
            }

            else {
                if (StartDateStatus == true && EndDateStatus == false) {
                    $('#enddateerror').show();
                    $('#startdateerror').hide();

                } else if (EndDateStatus == true && StartDateStatus == false) {
                    $('#enddateerror').hide();

                    $('#startdateerror').show();
                } else {
                    $('#enddateerror').show();

                    $('#startdateerror').show();

                }

                return false;
            }
        }

    }
        function closeaddperiod() {
            $('#subperiodmodal').modal('hide');
        }
        function closeeditsubperiod() {
            $('#editsubperiodmodal').modal('hide');
        }

        function addsubperiod() {


            if ($("#txtspStartDate").val() != null &&
                $("#txtspEndDate").val() != '') {

                SubperiodAddtotable();


                $("#txtEndDate").focus();
                $('#subperiodmodal').modal('hide');

            }
        }

        function SubperiodAddtotable() {


            var spstartdate = $("#txtspStartDate").val();
            var spenddate = $("#txtspEndDate").val();

            spstartdate = moment(spstartdate, 'YYYY-MM-DD').format('DD/MM/YYYY');
            spenddate = moment(spenddate, 'YYYY-MM-DD').format('DD/MM/YYYY');

            var periodlock = "";
            var depriciation = "";
            if ($('#isPeriodlockFlag').is(':checked')) {


                periodlock = "Y";
            }
            else {
                periodlock = "N";

            }
            ////check whether the subperiod date is between period date range
            var startdate = moment($("#txtStartDate").val()).format('YYYY-MM-DD');
            var enddate = moment($("#txtEndDate").val()).format('YYYY-MM-DD');
            var checkspstartdate = moment($("#txtspStartDate").val()).format('YYYY-MM-DD');
            var checkspenddate = moment($("#txtspEndDate").val()).format('YYYY-MM-DD');
            if (new Date(checkspstartdate) < new Date(startdate)) {


                swal("Alert", "Subperiod start date cannot be less then parent period start date", "warning");

                return;

            }
            else {
            }
            if (new Date(checkspstartdate) > new Date(enddate)) {


                swal("Alert", "Subperiod start date cannot be greater then parent period end date", "warning");

                return;
            }
            else {
            }
            if (new Date(checkspenddate) > new Date(enddate)) {


                swal("Alert", "Subperiod end date cannot be greater then parent period end date", "warning");
                return;
            }
            else {
            }
            if (new Date(checkspenddate) < new Date(startdate)) {

                //alert("end")
                swal("Alert", "Subperiod end date should be greater then parent period start date", "warning");
                return;
            }
            else {
            }

            ////////////////////////////////////////////////////////////////////

            var errorstartdate = moment($("#txtspStartDate").val()).format('YYYY-MM-DD');
            var errorenddate = moment($("#txtspEndDate").val()).format('YYYY-MM-DD');

            if (new Date(errorstartdate) > new Date(errorenddate)) {

                $("#spinvaliddateerror").html(" * To Date must be greater than From Date");
                $("#spinvaliddateerror").show();
            }
            else {

                $("#spinvaliddateerror").hide();
                $('#tblSubPeriod').last().append('<tr><td>' + srnocnt + '</td><td>' + spstartdate + '</td>'
                    + '<td>' + spenddate + '</td ><td>' + periodlock + '</td > <td>' + depriciation + '</td > <td align="center"> <button type="button" class="btn btn-primary btn-sm"'
                    + ' aria-label="Left Align"'
                    + 'onclick="Editsubperiod(this,' + srnocnt + ');">'
                    + '  <i class="fa fa-edit"></i></button></td><td align="center"> <button type="button" class="btn btn-primary btn-sm"'
                    + ' aria-label="Center Align"'
                    + 'onclick="deletesubperiod(this);">'
                    + '  <i class="fa fa-remove"></i>  </button></td></tr > ');

                srnocnt++;
            }
        }
        function deletesubperiod(obj) {
            swal({ title: "Are You Sure?", text: "You won't be able to revert this!", icon: "warning", buttons: true, dangerMode: true }).then((result) => {
                if (result == true) {
                    $(obj).parent().parent().remove();
                    srnocnt - 1;
                }
            });


        }
        function Editsubperiod(id, editcnt) {
            //$(id).parent();
            editindex = editcnt;
            var tr = $(id).parent().parent();
            var startDate = $(tr).find("td").eq(1).html();
            var endDate = $(tr).find("td").eq(2).html();
            var periodlock = $(tr).find("td").eq(3).html();
            if (periodlock == "Y") {
                $("#edisPeriodlockFlag").prop("checked", true);

            }
            else {
                $("#edisPeriodlockFlag").prop("checked", false);
            }
            $("#txtedspStartDate").val(startDate);
            $('#txtedspEndDate').val(endDate);

            $('#editsubperiodmodal').modal('show');
        }

        function editsubperiod() {

            if ($("#txtedspStartDate").val() != null &&
                $("#txtedspEndDate").val() != '') {
                Subperiodedittable();
                $('#editsubperiodmodal').modal('hide');

            }
        }

        function Subperiodedittable() {
            var periodlock = "";
            var depriciation = "";
            if ($('#edisPeriodlockFlag').is(':checked')) {


                periodlock = "Y";
            }
            else {
                periodlock = "N";

            }
            var spstartdate = $("#txtedspStartDate").val();
            var spenddate = $("#txtedspEndDate").val();

            ////check whether the subperiod date is between period date range
            var startdate = moment($("#txtStartDate").val()).format('YYYY-MM-DD');
            var enddate = moment($("#txtEndDate").val()).format('YYYY-MM-DD');
            var checkspstartdate = moment($("#txtedspStartDate").val()).format('YYYY-MM-DD');
            var checkspenddate = moment($("#txtedspEndDate").val()).format('YYYY-MM-DD');
            if (new Date(checkspstartdate) < new Date(startdate)) {


                swal("Alert", "Subperiod start date cannot be less then parent period start date", "warning");

                return;

            }
            else {
            }
            if (new Date(checkspstartdate) > new Date(enddate)) {


                swal("Alert", "Subperiod start date cannot be greater then parent period end date", "warning");

                return;
            }
            else {
            }
            if (new Date(checkspenddate) > new Date(enddate)) {


                swal("Alert", "Subperiod end date cannot be greater then parent period end date", "warning");
                return;
            }
            else {
            }
            if (new Date(checkspenddate) < new Date(startdate)) {

                //alert("end")
                swal("Alert", "Subperiod end date should be greater then parent period start date", "warning");
                return;
            }
            else {
            }




            var errorstartdate = moment($("#txtspStartDate").val()).format('YYYY-MM-DD');
            var errorenddate = moment($("#txtspEndDate").val()).format('YYYY-MM-DD');

            if (new Date(errorstartdate) > new Date(errorenddate)) {

                $("#edspinvaliddateerror").html(" * To Date must be greater than From Date");
                $("#edspinvaliddateerror").show();
            }
            else {

                $("#edspinvaliddateerror").hide();
                var tbl = $('#tblSubPeriod tbody tr:has(td)').each(function () {
                    var srno = $(this).find("td").eq(0).html();
                    if (srno == editindex) {
                        //alert('check');
                        $(this).find("td").eq(1).html(spstartdate);
                        $(this).find("td").eq(2).html(spenddate);
                        $(this).find("td").eq(3).html(periodlock);
                        $(this).find("td").eq(4).html(depriciation);
                    }
                })
            }

        }

</script>



