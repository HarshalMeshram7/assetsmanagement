@model VerifyWebApp.Models.ITPeriod
@{
    ViewBag.Title = "AddNew";
}

<style>
    label span {
        color: red;
        font-size: 20px;
    }
</style>

<div class="modal-content">
    <div class="modal-header" style="background-color:Highlight">

        <div class="modal-title htitle"><b>Add Income Tax Period</b></div>
        <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
    </div>
    @using (@Html.BeginForm(null, null, FormMethod.Post, new { id = "frmNewEmp", name = "frmNewEmp" }))
    {
        @Html.AntiForgeryToken();
        <div class="modal-body">

            @*@Html.ValidationSummary(true)*@
            <div class="form-group">
                <label for="praticesname">Start Date<span>*</span></label>
                <input id="stDate" tabindex="6" class="form-control form-control-sm" placeholder="dd-mm-yyyy" value="" type="date" />
                <div style="color:#CC0000;font-weight:400" id="enddateerror">Select Date</div>
            </div>
            <div class="form-group">
                <label for="praticesname">End Date<span>*</span></label>
                <input id="EndDate" tabindex="6" class="form-control form-control-sm" placeholder="dd-mm-yyyy" value="" type="date" />

                <div style="color:#CC0000;font-weight:400" id="enddateerror">Select Date</div>
            </div>
            <div class="form-group">
                <label>Lock this period so entries cannot be made<span>*</span></label>
                @Html.CheckBox("isPeriodlockFlag", false)

            </div>

            <div><label style="font-size:12px;color:red "><span>*</span> Mandatory Fields</label></div>
            <label id="invaliddate" style="color:#CC0000;font-weight:400" class="text-danger error"></label>
        </div>

        <div class="modal-footer">
            <button type="button" class="btn btn-primary" id="btnSave">Save</button>


            <button type="button" class="btn btn-sm clBtn" id="btnClose" data-bs-dismiss="modal">Close</button>
        </div>
    }
</div><!-- /.modal-content -->

<script src="~/Scripts/moment.js"></script>
<link href="~/Content/bootstrap-datetimepicker.css" rel="stylesheet" />
<script src="~/Scripts/bootstrap-datetimepicker.js"></script>


@*<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>*@

<script type="text/javascript">

        $('#btnSave').click(function (event)
        {
            //debugger;
            SaveData();
            e.preventDefault();
            return false;
        });

        $('#dtStartDate').datetimepicker({
            format: 'DD/MM/YYYY',
            icons:
            {
                next: 'fa fa-angle-right',
                previous: 'fa fa-angle-left'
            },
        });

        $('#dtEndDate').datetimepicker({
            format: 'DD/MM/YYYY',
            icons:
            {
               next: 'fa fa-angle-right',
               previous: 'fa fa-angle-left'
           },
        });

        var EndDateStatus = false;
        var StartDateStatus = false;

        $(document).ready(function () {
            // setting bydefault dates
            setdefaultdates();
            ////////////////

            //$("#startdateerror,#enddateerror").hide();
            //$("#btnSave").click(function () {

            //    var startdate = moment($("#txtStartDate").val(), 'DD/MM/YYYY').format('YYYY-MM-DD');
            //    var enddate = moment($("#txtEndDate").val(), 'DD/MM/YYYY').format('YYYY-MM-DD');

            //    if (new Date(startdate) > new Date(enddate)) {

            //        $("#invaliddate").html(" * To Date must be greater than From Date");
            //        $("#invaliddate").show();

            //    else {

            //            $("#invaliddate").hide();
            //            alert("test");
            //            SaveData();
            //        }
            //    });
            $("#startdateerror,#enddateerror").hide();
            $("#btnSave").click(function () {

                var startdate = moment($("#txtStartDate").val(), 'DD/MM/YYYY').format('YYYY-MM-DD');
                var enddate = moment($("#txtEndDate").val(), 'DD/MM/YYYY').format('YYYY-MM-DD');

                if (new Date(startdate) > new Date(enddate)) {

                    $("#invaliddate").html(" * To Date must be greater than From Date");
                    $("#invaliddate").show();
                }
                else {
                    $("#invaliddate").hide();
                    //     alert("test");
                    SaveData();
                }
            });
        });
     /*   });*/


        function setdefaultdates() {
            var todate = '@ViewBag.todate';
            var fromdate = '@ViewBag.fromdate';
            if (fromdate=="01/04/" && todate=="31/03/")
            {
                $("#txtEndDate").prop("readonly", false);
                $("#txtStartDate").prop("readonly", false);
                 $("#txtStartDate").val(fromdate);
                 $("#txtEndDate").val(todate);


            }

            if (fromdate != "01/04/" && todate != "31/03/")
            {

                $("#txtEndDate").prop("readonly", true);
                $("#txtStartDate").prop("readonly", true);

                 $("#txtStartDate").val(fromdate);
                  $("#txtEndDate").val(todate);
            }
        }

        function SaveData() {
            // alert('Save');
            var periodlock;
            if ($('#isPeriodlockFlag').is(':checked')) {
                periodlock = 1;
            }
            else {
                periodlock = 0;
            }

            var StartDate;
            var EndDate;

            StartDate = $('#txtStartDate').val();
            EndDate = $('#txtEndDate').val();

            if (StartDate == '') {
                StartDateStatus = false;
            }
            else {
                //$('#assignError').hide();
                StartDateStatus = true;
            }

            if (EndDate == '') {
                EndDateStatus = false;
            }
            else {
                //$('#assignError').hide();
                EndDateStatus = true;
            }

            if (StartDateStatus == true && EndDateStatus == true) {

                $("#startdateerror,#enddateerror").hide();
                // alert("test");
                var startdate = moment($("#txtStartDate").val(), 'DD/MM/YYYY').format('YYYY-MM-DD');
                var enddate = moment($("#txtEndDate").val(), 'DD/MM/YYYY').format('YYYY-MM-DD');
                var postdata =
                {
                    "FromDate": startdate,
                    "ToDate": enddate,
                    "PeriodlockFlag": periodlock
                };

                swal({ title: "Are You Sure?", text: "You won't be able to revert this!", icon: "warning", buttons: true, dangerMode: true }).then((result) => {


                if (result == true) {
                    var ControllerURL = '@Url.Action("AddNew", "ItPeriod")';

                    var returnURL = '@Url.Action("Index", "ItPeriod")';

                    var form = $('#frmNewEmp');
                    var token = $('input[name="__RequestVerificationToken"]', form).val();
                    var headers = {};
                    headers['__RequestVerificationToken'] = token;
                    $.ajax({
                        type: 'POST',
                        url: ControllerURL,
                        contentType: "application/json",
                        headers: headers,
                        data: JSON.stringify(postdata),
                        success: function (res) {
                          //  debugger;

                            if (res == "Success") {
                                swal({ title: "Successfully Added!", icon: "success" }).then((result) => {
                                    if (result == true) {
                                        window.location.replace(returnURL);
                                    }
                                });
                            }
                            else {
                                swal("Alert", "You Cannot Add this Record", "warning");
                            }

                        },

                        failure: function () { alert("Error"); }

                    });
                    }
                });
                // window.location.replace(returnURL);
            }
 else {
                    if (StartDateStatus == true && EndDateStatus == false) {
                        $('#enddateerror').show();

                        $('#startdateerror').hide();

                    }
                    else if (EndDateStatus == true && StartDateStatus == false) {
                        $('#enddateerror').hide();

                        $('#startdateerror').show();
                    }

                    else {
                        $('#enddateerror').show();

                        $('#startdateerror').show();

                    }
                    return false;
                }
            }
        

</script>


